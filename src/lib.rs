#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

extern crate libc;

/* automatically generated by rust-bindgen */

pub type size_t = ::libc::c_ulong;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed5;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
                  __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
                  __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
                  __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type wchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed6 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed8 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed11;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed12;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed13;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed14 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed14;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed15 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed16 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed16 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed17 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed18 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed18 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed18;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed19 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed19 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed20 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_char,
    pub __pad1: [::libc::c_uchar; 7usize],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed21 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed21 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed21;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed22 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed22 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed22;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed23 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed23 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed23;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::clone::Clone for Struct_random_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_drand48_data {
    pub __x: [::libc::c_ushort; 3usize],
    pub __old_x: [::libc::c_ushort; 3usize],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
impl ::std::clone::Clone for Struct_drand48_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void,
                                        arg2: *const ::libc::c_void)
                              -> ::libc::c_int>;
pub type ptrdiff_t = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub __clang_max_align_nonce1: ::libc::c_longlong,
    pub __clang_max_align_nonce2: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed24;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub enum Struct_marpa_g { }
pub type Marpa_Grammar = *mut Struct_marpa_g;
pub enum Struct_marpa_r { }
pub type Marpa_Recognizer = *mut Struct_marpa_r;
pub type Marpa_Recce = Marpa_Recognizer;
pub enum Struct_marpa_bocage { }
pub type Marpa_Bocage = *mut Struct_marpa_bocage;
pub enum Struct_marpa_order { }
pub type Marpa_Order = *mut Struct_marpa_order;
pub type ORDER = Marpa_Order;
pub enum Struct_marpa_tree { }
pub type Marpa_Tree = *mut Struct_marpa_tree;
pub type Marpa_Value = *mut Struct_marpa_value;
pub type Marpa_Rank = ::libc::c_int;
pub type Marpa_Event_Type = ::libc::c_int;
pub type Marpa_Error_Code = ::libc::c_int;
pub type Marpa_Symbol_ID = ::libc::c_int;
pub type Marpa_NSY_ID = ::libc::c_int;
pub type Marpa_Rule_ID = ::libc::c_int;
pub type Marpa_IRL_ID = ::libc::c_int;
pub type Marpa_AHM_ID = ::libc::c_int;
pub type Marpa_Assertion_ID = ::libc::c_int;
pub type Marpa_Earleme = ::libc::c_int;
pub type Marpa_Earley_Set_ID = ::libc::c_int;
pub type Marpa_Earley_Item_ID = ::libc::c_int;
pub type Marpa_Or_Node_ID = ::libc::c_int;
pub type Marpa_And_Node_ID = ::libc::c_int;
pub type Marpa_Nook_ID = ::libc::c_int;
pub type Marpa_Step_Type = ::libc::c_int;
pub type Marpa_Message_ID = *const ::libc::c_char;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_config {
    pub t_is_ok: ::libc::c_int,
    pub t_error: Marpa_Error_Code,
    pub t_error_string: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_marpa_config {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Marpa_Config = Struct_marpa_config;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_event {
    pub t_type: Marpa_Event_Type,
    pub t_value: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_marpa_event {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_event {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Marpa_Event = Struct_marpa_event;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_progress_item {
    pub t_rule_id: Marpa_Rule_ID,
    pub t_position: ::libc::c_int,
    pub t_origin: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_marpa_progress_item {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_progress_item {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_value {
    pub t_step_type: Marpa_Step_Type,
    pub t_token_id: Marpa_Symbol_ID,
    pub t_token_value: ::libc::c_int,
    pub t_rule_id: Marpa_Rule_ID,
    pub t_arg_0: ::libc::c_int,
    pub t_arg_n: ::libc::c_int,
    pub t_result: ::libc::c_int,
    pub t_token_start_ys_id: Marpa_Earley_Set_ID,
    pub t_rule_start_ys_id: Marpa_Earley_Set_ID,
    pub t_ys_id: Marpa_Earley_Set_ID,
}
impl ::std::clone::Clone for Struct_marpa_value {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_value {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type BITFIELD = ::libc::c_uint;
pub type MARPA_DSTACK = *mut Struct_marpa_dstack_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_dstack_s {
    pub t_count: ::libc::c_int,
    pub t_capacity: ::libc::c_int,
    pub t_base: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_marpa_dstack_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_dstack_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type marpa_avl_comparison_func =
    extern "C" fn(avl_a: *const ::libc::c_void, avl_b: *const ::libc::c_void,
                  avl_param: *mut ::libc::c_void) -> ::libc::c_int;
pub type marpa_avl_item_func =
    extern "C" fn(avl_item: *mut ::libc::c_void,
                  avl_param: *mut ::libc::c_void) -> ();
pub type marpa_avl_copy_func =
    extern "C" fn(avl_item: *mut ::libc::c_void,
                  avl_param: *mut ::libc::c_void) -> *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_avl_node {
    pub avl_link: [*mut Struct_marpa_avl_node; 2usize],
    pub avl_data: *mut ::libc::c_void,
    pub avl_balance: ::libc::c_char,
}
impl ::std::clone::Clone for Struct_marpa_avl_node {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_avl_node {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_avl_table {
    pub avl_root: *mut Struct_marpa_avl_node,
    pub avl_compare: *mut ::std::option::Option<extern "C" fn()
                                                    -> ::libc::c_int>,
    pub avl_param: *mut ::libc::c_void,
    pub avl_obstack: *mut Struct_marpa_obstack,
    pub avl_count: size_t,
    pub avl_generation: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_marpa_avl_table {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_avl_table {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MARPA_AVL_TREE = *mut Struct_marpa_avl_table;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_avl_traverser {
    pub avl_table: MARPA_AVL_TREE,
    pub avl_node: *mut Struct_marpa_avl_node,
    pub avl_stack: [*mut Struct_marpa_avl_node; 92usize],
    pub avl_height: size_t,
    pub avl_generation: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_marpa_avl_traverser {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_avl_traverser {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MARPA_AVL_TRAV = *mut Struct_marpa_avl_traverser;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_error_description_s {
    pub error_code: ::libc::c_int,
    pub name: *const ::libc::c_char,
    pub suggested: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_marpa_error_description_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_error_description_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_event_description_s {
    pub event_code: Marpa_Event_Type,
    pub name: *const ::libc::c_char,
    pub suggested: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_marpa_event_description_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_event_description_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_step_type_description_s {
    pub step_type: Marpa_Step_Type,
    pub name: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_marpa_step_type_description_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_step_type_description_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_obstack {
    pub chunk: *mut Struct_marpa_obstack_chunk,
    pub object_base: *mut ::libc::c_char,
    pub next_free: *mut ::libc::c_char,
    pub minimum_chunk_size: size_t,
}
impl ::std::clone::Clone for Struct_marpa_obstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_obstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_obstack_chunk_header {
    pub prev: *mut Struct_marpa_obstack_chunk,
    pub size: size_t,
}
impl ::std::clone::Clone for Struct_marpa_obstack_chunk_header {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_obstack_chunk_header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_marpa_obstack_chunk {
    pub header: Struct_marpa_obstack_chunk_header,
    pub contents: [::libc::c_char; 4usize],
}
impl ::std::clone::Clone for Struct_marpa_obstack_chunk {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_marpa_obstack_chunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type tavl_comparison_func =
    extern "C" fn(tavl_a: *const ::libc::c_void,
                  tavl_b: *const ::libc::c_void,
                  tavl_param: *mut ::libc::c_void) -> ::libc::c_int;
pub type tavl_item_func =
    extern "C" fn(tavl_item: *mut ::libc::c_void,
                  tavl_param: *mut ::libc::c_void) -> ();
pub type tavl_copy_func =
    extern "C" fn(tavl_item: *mut ::libc::c_void,
                  tavl_param: *mut ::libc::c_void) -> *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libavl_allocator {
    pub libavl_malloc: ::std::option::Option<extern "C" fn(arg1:
                                                               *mut Struct_libavl_allocator,
                                                           libavl_size:
                                                               size_t)
                                                 -> *mut ::libc::c_void>,
    pub libavl_free: ::std::option::Option<extern "C" fn(arg1:
                                                             *mut Struct_libavl_allocator,
                                                         libavl_block:
                                                             *mut ::libc::c_void)
                                               -> ()>,
}
impl ::std::clone::Clone for Struct_libavl_allocator {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_libavl_allocator {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tavl_table {
    pub tavl_root: *mut Struct_tavl_node,
    pub tavl_compare: *mut ::std::option::Option<extern "C" fn()
                                                     -> ::libc::c_int>,
    pub tavl_param: *mut ::libc::c_void,
    pub tavl_count: size_t,
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_tavl_table {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tavl_table {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_tavl_tag = ::libc::c_uint;
pub const TAVL_CHILD: ::libc::c_uint = 0;
pub const TAVL_THREAD: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tavl_node {
    pub tavl_link: [*mut Struct_tavl_node; 2usize],
    pub tavl_data: *mut ::libc::c_void,
    pub tavl_tag: [::libc::c_uchar; 2usize],
    pub tavl_balance: ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tavl_node {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tavl_node {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tavl_traverser {
    pub tavl_table: *mut Struct_tavl_table,
    pub tavl_node: *mut Struct_tavl_node,
}
impl ::std::clone::Clone for Struct_tavl_traverser {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tavl_traverser {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "marpa", kind = "static")]
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static marpa_major_version: ::libc::c_int;
    pub static marpa_minor_version: ::libc::c_int;
    pub static marpa_micro_version: ::libc::c_int;
    pub static marpa__out_of_memory:
               ::std::option::Option<extern "C" fn() -> *mut ::libc::c_void>;
    pub static mut marpa__debug_handler:
               ::std::option::Option<extern "C" fn(arg1:
                                                       *const ::libc::c_char, ...)
                                         -> ::libc::c_int>;
    pub static mut marpa__debug_level: ::libc::c_int;
    pub static mut marpa__tavl_allocator_default:
               *mut Struct_libavl_allocator;
}
#[link(name = "marpa", kind = "static")]
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(__nptr: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn strtod(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtof(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_float;
    pub fn strtold(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtol(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_long;
    pub fn strtoul(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoq(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtouq(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn strtoll(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoull(__nptr: *const ::libc::c_char,
                    __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn a64l(__s: *const ::libc::c_char) -> ::libc::c_long;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn random() -> ::libc::c_long;
    pub fn srandom(__seed: ::libc::c_uint) -> ();
    pub fn initstate(__seed: ::libc::c_uint, __statebuf: *mut ::libc::c_char,
                     __statelen: size_t) -> *mut ::libc::c_char;
    pub fn setstate(__statebuf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::libc::c_int;
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut Struct_random_data)
     -> ::libc::c_int;
    pub fn initstate_r(__seed: ::libc::c_uint,
                       __statebuf: *mut ::libc::c_char, __statelen: size_t,
                       __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn setstate_r(__statebuf: *mut ::libc::c_char,
                      __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn rand() -> ::libc::c_int;
    pub fn srand(__seed: ::libc::c_uint) -> ();
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn drand48() -> ::libc::c_double;
    pub fn erand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn lrand48() -> ::libc::c_long;
    pub fn nrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn jrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn srand48(__seedval: ::libc::c_long) -> ();
    pub fn seed48(__seed16v: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn lcong48(__param: *mut ::libc::c_ushort) -> ();
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn erand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn jrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn srand48_r(__seedval: ::libc::c_long,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn seed48_r(__seed16v: *mut ::libc::c_ushort,
                    __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn lcong48_r(__param: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn malloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::libc::c_void;
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: size_t)
     -> *mut ::libc::c_void;
    pub fn free(__ptr: *mut ::libc::c_void) -> ();
    pub fn cfree(__ptr: *mut ::libc::c_void) -> ();
    pub fn alloca(__size: size_t) -> *mut ::libc::c_void;
    pub fn valloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::libc::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::libc::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::libc::c_void;
    pub fn abort() -> ();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<extern "C" fn(__status:
                                                               ::libc::c_int,
                                                           __arg:
                                                               *mut ::libc::c_void)
                                                 -> ()>,
                   __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn exit(__status: ::libc::c_int) -> ();
    pub fn quick_exit(__status: ::libc::c_int) -> ();
    pub fn _Exit(__status: ::libc::c_int) -> ();
    pub fn getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn setenv(__name: *const ::libc::c_char,
                  __value: *const ::libc::c_char, __replace: ::libc::c_int)
     -> ::libc::c_int;
    pub fn unsetenv(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn clearenv() -> ::libc::c_int;
    pub fn mktemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(__template: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(__template: *mut ::libc::c_char,
                    __suffixlen: ::libc::c_int) -> ::libc::c_int;
    pub fn mkdtemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn system(__command: *const ::libc::c_char) -> ::libc::c_int;
    pub fn realpath(__name: *const ::libc::c_char,
                    __resolved: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn bsearch(__key: *const ::libc::c_void,
                   __base: *const ::libc::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn qsort(__base: *mut ::libc::c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t) -> ();
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong)
     -> lldiv_t;
    pub fn ecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn fcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn qecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qfcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qgcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn fcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn qecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn qfcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn mblen(__s: *const ::libc::c_char, __n: size_t) -> ::libc::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::libc::c_char,
                  __n: size_t) -> ::libc::c_int;
    pub fn wctomb(__s: *mut ::libc::c_char, __wchar: wchar_t)
     -> ::libc::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::libc::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::libc::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::libc::c_char,
                     __tokens: *const *mut ::libc::c_char,
                     __valuep: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn getloadavg(__loadavg: *mut ::libc::c_double,
                      __nelem: ::libc::c_int) -> ::libc::c_int;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                     __l: __locale_t) -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char,
                   __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char)
     -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_char,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t)
     -> *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char,
                      __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char, __n: size_t)
     -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn marpa__default_debug_handler(format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn marpa_check_version(required_major: ::libc::c_int,
                               required_minor: ::libc::c_int,
                               required_micro: ::libc::c_int)
     -> Marpa_Error_Code;
    pub fn marpa_version(version: *mut ::libc::c_int) -> Marpa_Error_Code;
    pub fn marpa_c_init(config: *mut Marpa_Config) -> ::libc::c_int;
    pub fn marpa_c_error(config: *mut Marpa_Config,
                         p_error_string: *mut *const ::libc::c_char)
     -> Marpa_Error_Code;
    pub fn marpa_g_new(configuration: *mut Marpa_Config) -> Marpa_Grammar;
    pub fn marpa_g_force_valued(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn marpa_g_ref(g: Marpa_Grammar) -> Marpa_Grammar;
    pub fn marpa_g_unref(g: Marpa_Grammar) -> ();
    pub fn marpa_g_start_symbol(g: Marpa_Grammar) -> Marpa_Symbol_ID;
    pub fn marpa_g_start_symbol_set(g: Marpa_Grammar, sym_id: Marpa_Symbol_ID)
     -> Marpa_Symbol_ID;
    pub fn marpa_g_highest_symbol_id(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn marpa_g_symbol_is_accessible(g: Marpa_Grammar,
                                        sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_nullable(g: Marpa_Grammar,
                                      sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_nulling(g: Marpa_Grammar,
                                     sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_productive(g: Marpa_Grammar,
                                        sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_start(g: Marpa_Grammar, sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_terminal_set(g: Marpa_Grammar,
                                          sym_id: Marpa_Symbol_ID,
                                          value: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_terminal(g: Marpa_Grammar,
                                      sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_new(g: Marpa_Grammar) -> Marpa_Symbol_ID;
    pub fn marpa_g_highest_rule_id(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn marpa_g_rule_is_accessible(g: Marpa_Grammar,
                                      rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_rule_is_nullable(g: Marpa_Grammar, ruleid: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_rule_is_nulling(g: Marpa_Grammar, ruleid: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_rule_is_loop(g: Marpa_Grammar, rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_rule_is_productive(g: Marpa_Grammar,
                                      rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_rule_length(g: Marpa_Grammar, rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_rule_lhs(g: Marpa_Grammar, rule_id: Marpa_Rule_ID)
     -> Marpa_Symbol_ID;
    pub fn marpa_g_rule_new(g: Marpa_Grammar, lhs_id: Marpa_Symbol_ID,
                            rhs_ids: *mut Marpa_Symbol_ID,
                            length: ::libc::c_int) -> Marpa_Rule_ID;
    pub fn marpa_g_rule_rhs(g: Marpa_Grammar, rule_id: Marpa_Rule_ID,
                            ix: ::libc::c_int) -> Marpa_Symbol_ID;
    pub fn marpa_g_rule_is_proper_separation(g: Marpa_Grammar,
                                             rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_sequence_min(g: Marpa_Grammar, rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_sequence_new(g: Marpa_Grammar, lhs_id: Marpa_Symbol_ID,
                                rhs_id: Marpa_Symbol_ID,
                                separator_id: Marpa_Symbol_ID,
                                min: ::libc::c_int, flags: ::libc::c_int)
     -> Marpa_Rule_ID;
    pub fn marpa_g_sequence_separator(g: Marpa_Grammar,
                                      rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_counted(g: Marpa_Grammar,
                                     sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_rule_rank_set(g: Marpa_Grammar, rule_id: Marpa_Rule_ID,
                                 rank: Marpa_Rank) -> Marpa_Rank;
    pub fn marpa_g_rule_rank(g: Marpa_Grammar, rule_id: Marpa_Rule_ID)
     -> Marpa_Rank;
    pub fn marpa_g_rule_null_high_set(g: Marpa_Grammar,
                                      rule_id: Marpa_Rule_ID,
                                      flag: ::libc::c_int) -> ::libc::c_int;
    pub fn marpa_g_rule_null_high(g: Marpa_Grammar, rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_g_completion_symbol_activate(g: Marpa_Grammar,
                                              sym_id: Marpa_Symbol_ID,
                                              reactivate: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_g_nulled_symbol_activate(g: Marpa_Grammar,
                                          sym_id: Marpa_Symbol_ID,
                                          reactivate: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_g_prediction_symbol_activate(g: Marpa_Grammar,
                                              sym_id: Marpa_Symbol_ID,
                                              reactivate: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_completion_event(g: Marpa_Grammar,
                                              sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_completion_event_set(g: Marpa_Grammar,
                                                  sym_id: Marpa_Symbol_ID,
                                                  value: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_nulled_event(g: Marpa_Grammar,
                                          sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_nulled_event_set(g: Marpa_Grammar,
                                              sym_id: Marpa_Symbol_ID,
                                              value: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_prediction_event(g: Marpa_Grammar,
                                              sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_prediction_event_set(g: Marpa_Grammar,
                                                  sym_id: Marpa_Symbol_ID,
                                                  value: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_g_precompute(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn marpa_g_is_precomputed(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn marpa_g_has_cycle(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn marpa_r_new(g: Marpa_Grammar) -> Marpa_Recognizer;
    pub fn marpa_r_ref(r: Marpa_Recognizer) -> Marpa_Recognizer;
    pub fn marpa_r_unref(r: Marpa_Recognizer) -> ();
    pub fn marpa_r_start_input(r: Marpa_Recognizer) -> ::libc::c_int;
    pub fn marpa_r_alternative(r: Marpa_Recognizer, token_id: Marpa_Symbol_ID,
                               value: ::libc::c_int, length: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_r_earleme_complete(r: Marpa_Recognizer) -> ::libc::c_int;
    pub fn marpa_r_current_earleme(r: Marpa_Recognizer) -> Marpa_Earleme;
    pub fn marpa_r_earleme(r: Marpa_Recognizer, set_id: Marpa_Earley_Set_ID)
     -> Marpa_Earleme;
    pub fn marpa_r_earley_set_value(r: Marpa_Recognizer,
                                    earley_set: Marpa_Earley_Set_ID)
     -> ::libc::c_int;
    pub fn marpa_r_earley_set_values(r: Marpa_Recognizer,
                                     earley_set: Marpa_Earley_Set_ID,
                                     p_value: *mut ::libc::c_int,
                                     p_pvalue: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn marpa_r_furthest_earleme(r: Marpa_Recognizer) -> ::libc::c_uint;
    pub fn marpa_r_latest_earley_set(r: Marpa_Recognizer)
     -> Marpa_Earley_Set_ID;
    pub fn marpa_r_latest_earley_set_value_set(r: Marpa_Recognizer,
                                               value: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_r_latest_earley_set_values_set(r: Marpa_Recognizer,
                                                value: ::libc::c_int,
                                                pvalue: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn marpa_r_completion_symbol_activate(r: Marpa_Recognizer,
                                              sym_id: Marpa_Symbol_ID,
                                              reactivate: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_r_earley_item_warning_threshold_set(r: Marpa_Recognizer,
                                                     threshold: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_r_earley_item_warning_threshold(r: Marpa_Recognizer)
     -> ::libc::c_int;
    pub fn marpa_r_expected_symbol_event_set(r: Marpa_Recognizer,
                                             symbol_id: Marpa_Symbol_ID,
                                             value: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_r_is_exhausted(r: Marpa_Recognizer) -> ::libc::c_int;
    pub fn marpa_r_nulled_symbol_activate(r: Marpa_Recognizer,
                                          sym_id: Marpa_Symbol_ID,
                                          boolean: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_r_prediction_symbol_activate(r: Marpa_Recognizer,
                                              sym_id: Marpa_Symbol_ID,
                                              boolean: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_r_terminals_expected(r: Marpa_Recognizer,
                                      buffer: *mut Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_r_terminal_is_expected(r: Marpa_Recognizer,
                                        symbol_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_r_progress_report_reset(r: Marpa_Recognizer)
     -> ::libc::c_int;
    pub fn marpa_r_progress_report_start(r: Marpa_Recognizer,
                                         set_id: Marpa_Earley_Set_ID)
     -> ::libc::c_int;
    pub fn marpa_r_progress_report_finish(r: Marpa_Recognizer)
     -> ::libc::c_int;
    pub fn marpa_r_progress_item(r: Marpa_Recognizer,
                                 position: *mut ::libc::c_int,
                                 origin: *mut Marpa_Earley_Set_ID)
     -> Marpa_Rule_ID;
    pub fn marpa_b_new(r: Marpa_Recognizer,
                       earley_set_ID: Marpa_Earley_Set_ID) -> Marpa_Bocage;
    pub fn marpa_b_ref(b: Marpa_Bocage) -> Marpa_Bocage;
    pub fn marpa_b_unref(b: Marpa_Bocage) -> ();
    pub fn marpa_b_ambiguity_metric(b: Marpa_Bocage) -> ::libc::c_int;
    pub fn marpa_b_is_null(b: Marpa_Bocage) -> ::libc::c_int;
    pub fn marpa_o_new(b: Marpa_Bocage) -> Marpa_Order;
    pub fn marpa_o_ref(o: Marpa_Order) -> Marpa_Order;
    pub fn marpa_o_unref(o: Marpa_Order) -> ();
    pub fn marpa_o_ambiguity_metric(o: Marpa_Order) -> ::libc::c_int;
    pub fn marpa_o_is_null(o: Marpa_Order) -> ::libc::c_int;
    pub fn marpa_o_high_rank_only_set(o: Marpa_Order, flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_o_high_rank_only(o: Marpa_Order) -> ::libc::c_int;
    pub fn marpa_o_rank(o: Marpa_Order) -> ::libc::c_int;
    pub fn marpa_t_new(o: Marpa_Order) -> Marpa_Tree;
    pub fn marpa_t_ref(t: Marpa_Tree) -> Marpa_Tree;
    pub fn marpa_t_unref(t: Marpa_Tree) -> ();
    pub fn marpa_t_next(t: Marpa_Tree) -> ::libc::c_int;
    pub fn marpa_t_parse_count(t: Marpa_Tree) -> ::libc::c_int;
    pub fn marpa_v_new(t: Marpa_Tree) -> Marpa_Value;
    pub fn marpa_v_ref(v: Marpa_Value) -> Marpa_Value;
    pub fn marpa_v_unref(v: Marpa_Value) -> ();
    pub fn marpa_v_step(v: Marpa_Value) -> Marpa_Step_Type;
    pub fn marpa_g_event(g: Marpa_Grammar, event: *mut Marpa_Event,
                         ix: ::libc::c_int) -> Marpa_Event_Type;
    pub fn marpa_g_event_count(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn marpa_g_error(g: Marpa_Grammar,
                         p_error_string: *mut *const ::libc::c_char)
     -> Marpa_Error_Code;
    pub fn marpa_g_error_clear(g: Marpa_Grammar) -> Marpa_Error_Code;
    pub fn marpa_g_default_rank_set(g: Marpa_Grammar, rank: Marpa_Rank)
     -> Marpa_Rank;
    pub fn marpa_g_default_rank(g: Marpa_Grammar) -> Marpa_Rank;
    pub fn marpa_g_symbol_rank_set(g: Marpa_Grammar, sym_id: Marpa_Symbol_ID,
                                   rank: Marpa_Rank) -> Marpa_Rank;
    pub fn marpa_g_symbol_rank(g: Marpa_Grammar, sym_id: Marpa_Symbol_ID)
     -> Marpa_Rank;
    pub fn marpa_g_zwa_new(g: Marpa_Grammar, default_value: ::libc::c_int)
     -> Marpa_Assertion_ID;
    pub fn marpa_g_zwa_place(g: Marpa_Grammar, zwaid: Marpa_Assertion_ID,
                             xrl_id: Marpa_Rule_ID, rhs_ix: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_r_zwa_default(r: Marpa_Recognizer, zwaid: Marpa_Assertion_ID)
     -> ::libc::c_int;
    pub fn marpa_r_zwa_default_set(r: Marpa_Recognizer,
                                   zwaid: Marpa_Assertion_ID,
                                   default_value: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_g_highest_zwa_id(g: Marpa_Grammar) -> Marpa_Assertion_ID;
    pub fn marpa_r_clean(r: Marpa_Recognizer) -> Marpa_Earleme;
    pub fn marpa_g_symbol_is_valued_set(g: Marpa_Grammar,
                                        symbol_id: Marpa_Symbol_ID,
                                        value: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_g_symbol_is_valued(g: Marpa_Grammar,
                                    symbol_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_v_symbol_is_valued_set(v: Marpa_Value,
                                        sym_id: Marpa_Symbol_ID,
                                        status: ::libc::c_int)
     -> ::libc::c_int;
    pub fn marpa_v_symbol_is_valued(v: Marpa_Value, sym_id: Marpa_Symbol_ID)
     -> ::libc::c_int;
    pub fn marpa_v_rule_is_valued_set(v: Marpa_Value, rule_id: Marpa_Rule_ID,
                                      status: ::libc::c_int) -> ::libc::c_int;
    pub fn marpa_v_rule_is_valued(v: Marpa_Value, rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn marpa_v_valued_force(v: Marpa_Value) -> ::libc::c_int;
    pub fn _marpa_g_nsy_is_start(g: Marpa_Grammar, nsy_id: Marpa_NSY_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_nsy_is_nulling(g: Marpa_Grammar, nsy_id: Marpa_NSY_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_nsy_is_lhs(g: Marpa_Grammar, nsy_id: Marpa_NSY_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_xsy_nulling_nsy(g: Marpa_Grammar, symid: Marpa_Symbol_ID)
     -> Marpa_NSY_ID;
    pub fn _marpa_g_xsy_nsy(g: Marpa_Grammar, symid: Marpa_Symbol_ID)
     -> Marpa_NSY_ID;
    pub fn _marpa_g_nsy_is_semantic(g: Marpa_Grammar, nsy_id: Marpa_NSY_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_source_xsy(g: Marpa_Grammar, nsy_id: Marpa_NSY_ID)
     -> Marpa_Rule_ID;
    pub fn _marpa_g_nsy_lhs_xrl(g: Marpa_Grammar, nsy_id: Marpa_NSY_ID)
     -> Marpa_Rule_ID;
    pub fn _marpa_g_nsy_xrl_offset(g: Marpa_Grammar, nsy_id: Marpa_NSY_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_rule_is_keep_separation(g: Marpa_Grammar,
                                            rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_nsy_count(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn _marpa_g_irl_count(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn _marpa_g_irl_lhs(g: Marpa_Grammar, irl_id: Marpa_IRL_ID)
     -> Marpa_Symbol_ID;
    pub fn _marpa_g_irl_length(g: Marpa_Grammar, irl_id: Marpa_IRL_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_irl_rhs(g: Marpa_Grammar, irl_id: Marpa_IRL_ID,
                            ix: ::libc::c_int) -> Marpa_Symbol_ID;
    pub fn _marpa_g_rule_is_used(g: Marpa_Grammar, rule_id: Marpa_Rule_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_irl_is_virtual_lhs(g: Marpa_Grammar, irl_id: Marpa_IRL_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_irl_is_virtual_rhs(g: Marpa_Grammar, irl_id: Marpa_IRL_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_virtual_start(g: Marpa_Grammar, irl_id: Marpa_IRL_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_virtual_end(g: Marpa_Grammar, irl_id: Marpa_IRL_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_source_xrl(g: Marpa_Grammar, irl_id: Marpa_IRL_ID)
     -> Marpa_Rule_ID;
    pub fn _marpa_g_real_symbol_count(g: Marpa_Grammar, irl_id: Marpa_IRL_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_irl_semantic_equivalent(g: Marpa_Grammar,
                                            irl_id: Marpa_IRL_ID)
     -> Marpa_Rule_ID;
    pub fn _marpa_g_irl_rank(g: Marpa_Grammar, irl_id: Marpa_IRL_ID)
     -> Marpa_Rank;
    pub fn _marpa_g_nsy_rank(g: Marpa_Grammar, nsy_id: Marpa_IRL_ID)
     -> Marpa_Rank;
    pub fn _marpa_g_ahm_count(g: Marpa_Grammar) -> ::libc::c_int;
    pub fn _marpa_g_ahm_irl(g: Marpa_Grammar, item_id: Marpa_AHM_ID)
     -> Marpa_Rule_ID;
    pub fn _marpa_g_ahm_position(g: Marpa_Grammar, item_id: Marpa_AHM_ID)
     -> ::libc::c_int;
    pub fn _marpa_g_ahm_postdot(g: Marpa_Grammar, item_id: Marpa_AHM_ID)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_is_use_leo(r: Marpa_Recognizer) -> ::libc::c_int;
    pub fn _marpa_r_is_use_leo_set(r: Marpa_Recognizer, value: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _marpa_r_trace_earley_set(r: Marpa_Recognizer)
     -> Marpa_Earley_Set_ID;
    pub fn _marpa_r_earley_set_size(r: Marpa_Recognizer,
                                    set_id: Marpa_Earley_Set_ID)
     -> ::libc::c_int;
    pub fn _marpa_r_earley_set_trace(r: Marpa_Recognizer,
                                     set_id: Marpa_Earley_Set_ID)
     -> Marpa_Earleme;
    pub fn _marpa_r_earley_item_trace(r: Marpa_Recognizer,
                                      item_id: Marpa_Earley_Item_ID)
     -> Marpa_AHM_ID;
    pub fn _marpa_r_earley_item_origin(r: Marpa_Recognizer)
     -> Marpa_Earley_Set_ID;
    pub fn _marpa_r_leo_predecessor_symbol(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_leo_base_origin(r: Marpa_Recognizer)
     -> Marpa_Earley_Set_ID;
    pub fn _marpa_r_leo_base_state(r: Marpa_Recognizer) -> Marpa_AHM_ID;
    pub fn _marpa_r_postdot_symbol_trace(r: Marpa_Recognizer,
                                         symid: Marpa_Symbol_ID)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_first_postdot_item_trace(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_next_postdot_item_trace(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_postdot_item_symbol(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_first_token_link_trace(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_next_token_link_trace(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_first_completion_link_trace(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_next_completion_link_trace(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_first_leo_link_trace(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_next_leo_link_trace(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_source_predecessor_state(r: Marpa_Recognizer)
     -> Marpa_AHM_ID;
    pub fn _marpa_r_source_token(r: Marpa_Recognizer,
                                 value_p: *mut ::libc::c_int)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_source_leo_transition_symbol(r: Marpa_Recognizer)
     -> Marpa_Symbol_ID;
    pub fn _marpa_r_source_middle(r: Marpa_Recognizer) -> Marpa_Earley_Set_ID;
    pub fn _marpa_b_and_node_count(b: Marpa_Bocage) -> ::libc::c_int;
    pub fn _marpa_b_and_node_middle(b: Marpa_Bocage,
                                    and_node_id: Marpa_And_Node_ID)
     -> Marpa_Earley_Set_ID;
    pub fn _marpa_b_and_node_parent(b: Marpa_Bocage,
                                    and_node_id: Marpa_And_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_and_node_predecessor(b: Marpa_Bocage,
                                         and_node_id: Marpa_And_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_and_node_cause(b: Marpa_Bocage,
                                   and_node_id: Marpa_And_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_and_node_symbol(b: Marpa_Bocage,
                                    and_node_id: Marpa_And_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_and_node_token(b: Marpa_Bocage,
                                   and_node_id: Marpa_And_Node_ID,
                                   value_p: *mut ::libc::c_int)
     -> Marpa_Symbol_ID;
    pub fn _marpa_b_top_or_node(b: Marpa_Bocage) -> Marpa_Or_Node_ID;
    pub fn _marpa_b_or_node_set(b: Marpa_Bocage, or_node_id: Marpa_Or_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_or_node_origin(b: Marpa_Bocage,
                                   or_node_id: Marpa_Or_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_or_node_irl(b: Marpa_Bocage, or_node_id: Marpa_Or_Node_ID)
     -> Marpa_IRL_ID;
    pub fn _marpa_b_or_node_position(b: Marpa_Bocage,
                                     or_node_id: Marpa_Or_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_or_node_is_whole(b: Marpa_Bocage,
                                     or_node_id: Marpa_Or_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_or_node_is_semantic(b: Marpa_Bocage,
                                        or_node_id: Marpa_Or_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_or_node_first_and(b: Marpa_Bocage,
                                      or_node_id: Marpa_Or_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_or_node_last_and(b: Marpa_Bocage,
                                     or_node_id: Marpa_Or_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_b_or_node_and_count(b: Marpa_Bocage,
                                      or_node_id: Marpa_Or_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_o_and_order_get(o: Marpa_Order,
                                  or_node_id: Marpa_Or_Node_ID,
                                  ix: ::libc::c_int) -> Marpa_And_Node_ID;
    pub fn _marpa_o_or_node_and_node_count(o: Marpa_Order,
                                           or_node_id: Marpa_Or_Node_ID)
     -> ::libc::c_int;
    pub fn _marpa_o_or_node_and_node_id_by_ix(o: Marpa_Order,
                                              or_node_id: Marpa_Or_Node_ID,
                                              ix: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _marpa_t_size(t: Marpa_Tree) -> ::libc::c_int;
    pub fn _marpa_t_nook_or_node(t: Marpa_Tree, nook_id: Marpa_Nook_ID)
     -> Marpa_Or_Node_ID;
    pub fn _marpa_t_nook_choice(t: Marpa_Tree, nook_id: Marpa_Nook_ID)
     -> ::libc::c_int;
    pub fn _marpa_t_nook_parent(t: Marpa_Tree, nook_id: Marpa_Nook_ID)
     -> ::libc::c_int;
    pub fn _marpa_t_nook_cause_is_ready(t: Marpa_Tree, nook_id: Marpa_Nook_ID)
     -> ::libc::c_int;
    pub fn _marpa_t_nook_predecessor_is_ready(t: Marpa_Tree,
                                              nook_id: Marpa_Nook_ID)
     -> ::libc::c_int;
    pub fn _marpa_t_nook_is_cause(t: Marpa_Tree, nook_id: Marpa_Nook_ID)
     -> ::libc::c_int;
    pub fn _marpa_t_nook_is_predecessor(t: Marpa_Tree, nook_id: Marpa_Nook_ID)
     -> ::libc::c_int;
    pub fn _marpa_v_trace(v: Marpa_Value, flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _marpa_v_nook(v: Marpa_Value) -> Marpa_Nook_ID;
    pub fn _marpa_tag() -> *const ::libc::c_char;
    pub fn marpa_debug_level_set(level: ::libc::c_int) -> ::libc::c_int;
    pub fn marpa_debug_handler_set(debug_handler:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *const ::libc::c_char, ...)
                                                                 ->
                                                                     ::libc::c_int>)
     -> ();
    pub fn _marpa_avl_create(arg1:
                                 *mut ::std::option::Option<extern "C" fn()
                                                                ->
                                                                    ::libc::c_int>,
                             arg2: *mut ::libc::c_void) -> MARPA_AVL_TREE;
    pub fn _marpa_avl_copy(arg1: MARPA_AVL_TREE,
                           arg2:
                               *mut ::std::option::Option<extern "C" fn()
                                                              ->
                                                                  *mut ::libc::c_void>,
                           arg3:
                               *mut ::std::option::Option<extern "C" fn()
                                                              -> ()>,
                           alignment: ::libc::c_int) -> MARPA_AVL_TREE;
    pub fn _marpa_avl_destroy(arg1: MARPA_AVL_TREE) -> ();
    pub fn _marpa_avl_probe(arg1: MARPA_AVL_TREE, arg2: *mut ::libc::c_void)
     -> *mut *mut ::libc::c_void;
    pub fn _marpa_avl_insert(arg1: MARPA_AVL_TREE, arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn _marpa_avl_replace(arg1: MARPA_AVL_TREE, arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn _marpa_avl_find(arg1: MARPA_AVL_TREE, arg2: *const ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn _marpa_avl_at_or_after(arg1: MARPA_AVL_TREE,
                                  arg2: *const ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_init(arg1: MARPA_AVL_TREE) -> MARPA_AVL_TRAV;
    pub fn _marpa_avl_t_reset(arg1: MARPA_AVL_TRAV) -> MARPA_AVL_TRAV;
    pub fn _marpa_avl_t_first(arg1: MARPA_AVL_TRAV) -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_last(arg1: MARPA_AVL_TRAV) -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_find(arg1: MARPA_AVL_TRAV, arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_copy(arg1: *mut Struct_marpa_avl_traverser,
                             arg2: *const Struct_marpa_avl_traverser)
     -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_next(arg1: MARPA_AVL_TRAV) -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_prev(arg1: MARPA_AVL_TRAV) -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_cur(arg1: MARPA_AVL_TRAV) -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_insert(arg1: MARPA_AVL_TRAV,
                               arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_replace(arg1: MARPA_AVL_TRAV,
                                arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn _marpa_avl_t_at_or_after(arg1: MARPA_AVL_TRAV,
                                    arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn marpa__obs_newchunk(arg1: *mut Struct_marpa_obstack, arg2: size_t,
                               arg3: size_t) -> *mut ::libc::c_void;
    pub fn marpa__obs_begin(arg1: size_t) -> *mut Struct_marpa_obstack;
    pub fn marpa__obs_free(__obstack: *mut Struct_marpa_obstack) -> ();
    pub fn marpa__tavl_create(arg1:
                                  *mut ::std::option::Option<extern "C" fn()
                                                                 ->
                                                                     ::libc::c_int>,
                              arg2: *mut ::libc::c_void)
     -> *mut Struct_tavl_table;
    pub fn marpa__tavl_copy(arg1: *const Struct_tavl_table,
                            arg2:
                                *mut ::std::option::Option<extern "C" fn()
                                                               ->
                                                                   *mut ::libc::c_void>,
                            arg3:
                                *mut ::std::option::Option<extern "C" fn()
                                                               -> ()>)
     -> *mut Struct_tavl_table;
    pub fn marpa__tavl_destroy(arg1: *mut Struct_tavl_table,
                               arg2:
                                   *mut ::std::option::Option<extern "C" fn()
                                                                  -> ()>)
     -> ();
    pub fn marpa__tavl_probe(arg1: *mut Struct_tavl_table,
                             arg2: *mut ::libc::c_void)
     -> *mut *mut ::libc::c_void;
    pub fn marpa__tavl_delete(arg1: *mut Struct_tavl_table,
                              arg2: *const ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_find(arg1: *const Struct_tavl_table,
                            arg2: *const ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_assert_insert(arg1: *mut Struct_tavl_table,
                                     arg2: *mut ::libc::c_void) -> ();
    pub fn marpa__tavl_assert_delete(arg1: *mut Struct_tavl_table,
                                     arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_t_init(arg1: *mut Struct_tavl_traverser,
                              arg2: *mut Struct_tavl_table) -> ();
    pub fn marpa__tavl_t_first(arg1: *mut Struct_tavl_traverser,
                               arg2: *mut Struct_tavl_table)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_t_last(arg1: *mut Struct_tavl_traverser,
                              arg2: *mut Struct_tavl_table)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_t_find(arg1: *mut Struct_tavl_traverser,
                              arg2: *mut Struct_tavl_table,
                              arg3: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_t_insert(arg1: *mut Struct_tavl_traverser,
                                arg2: *mut Struct_tavl_table,
                                arg3: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_t_copy(arg1: *mut Struct_tavl_traverser,
                              arg2: *const Struct_tavl_traverser)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_t_next(arg1: *mut Struct_tavl_traverser)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_t_prev(arg1: *mut Struct_tavl_traverser)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_t_cur(arg1: *mut Struct_tavl_traverser)
     -> *mut ::libc::c_void;
    pub fn marpa__tavl_t_replace(arg1: *mut Struct_tavl_traverser,
                                 arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
}
